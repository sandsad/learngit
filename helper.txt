1、将当前目录变成Git可以管理的仓库：git init
2、将文件添加到版本库：
	第一步、git add readme.txt：告诉Git，把文件添加到仓库；
	第二步、git commit -m "illustration"：-m后面输入本次提交的说明
3、查看仓库当前状态：git status
4、查看difference：git diff readme.txt
5、提交修改和添加新文件命令相同
6、查看历史记录：git log [--pretty=oneline]
7、回退版本：git reset --hard HEAD^
	HEAD表示当前版本，HEAD^表示上个版本，HEAD^^表示上上个版本，HEAD~100表示往上100个版本
8、使用git reset --hard 版本id 可以回退到任意一个版本（包括回退后）
9、查看命令历史：git reflog

工作区和暂存区
工作区：电脑上能看到的目录；
版本库：工作区中隐藏目录.git；
暂存区：版本库中名为stage（或index）的暂存区
git add命令就是把文件修改添加到暂存区;git commit就是往master分支提交更改。

10、丢弃工作区的更改：git checkout -- file
11、丢弃暂存区的更改：git reset HEAD <file>

删除文件:文件管理器中删除文件之后，工作区和版本库不一致，git status命令会知道哪些文件被删除了：
	删除版本库中文件：git rm file + git commit -m "illustration"
	恢复工作区中文件：git checkout -- file
	
本地Git仓库和GitHub仓库之间的传输是通过SSH加密，需要以下设置：
第一步：创建SSH key.用户主目录下是否有.ssh目录，这个目录下是否有id_rsa和id_rsa.pub，如果有则跳过，没有则打开shell（Windows下打开Git Bash），创建SSH Key:
	$ssh-keygen -t rsa -C "youremail@example.com"
第二步：登录GitHub，打开"Account settings" > "SSH Key"页面：点击"Add SSH Key",填任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，点击"Add Key",就可以看到已添加的Key。


本地Git仓库与GitHub仓库
(1)新建仓库："Create a new repository",Repository name填入learngit,其他保持默认,点击"Create repository",成功创建一个新的Git仓库；
(2)把本地仓库内容推送到GitHub仓库中：本地仓库下运行命令
	$git remote add origin git@github.com:sandsad/learngit.git
	ps:sandsad为GitHub用户名,learngit为仓库名
(3)把本地仓库推送到远程库上：
	$git push -u origin master (git push命令实际上是把当前分支master推送到远程，由于远程库是空的，第一次push时加上-u参数,Git不但会把本地的master分支推送，还会与远程的master分支关联起来)
	(第一次使用Git的clone或push命令连接GitHub时会遇到一个警告,SSH连接在第一次验证GitHub服务器key时需要确认，输入yes回车即可)
(4)本地作了提交之后就可以通过命令推送到GitHub中：
	$git push origin master


从远程库克隆：
$git clone git@github.com:sandsad/learngit.git

分支：
1、查看分支：git branch
2、创建分支：git branch <name>
3、切换分支：git checkout <name>
4、创建+切换分支：git checkout -b <name>
5、合并某分支到当前分支：git merge <name>
6、删除分支：git branch -d <name>

解决冲突：
1、创建分支git checkout -b feature1，修改readme.txt最后一行为"Creating a new branch is quick AND simple."，在分支feature1上提交；
2、再切换到master分支，修改readme.txt最后一行为"Creating a new branch is quick & simple."，在master分支提交；
3、两个分支均有提交，导致不能快速合并，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，（git status也可以告诉我吗冲突的文件）；
4、查看readme.txt的内容发现Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存："Creating a new branch is quick and simple."
	用带参数--graph的git log可以看到分支的合并情况：git log --graph --pretty=oneline --abbrev-commit
5、删除feature1分支。

通常分支合并时，Git尽可能使用Fast forward模式，但是这种模式下，删除分支后悔丢掉分支信息，如果强制禁止Fast forward模式，Git就会在merge时生成一个新的commit，这样就可以看出分支信息。
1、git checkout -b dev
2、修改文件，并添加提交
3、git checkout master
4、git merge --no-ff -m "merge with no-ff" dev (创建新的commit使用-m参数添加描述)
5、git log --graph --pretty=oneline --abbrev-commit

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。